import gym
import random
import numpy as np
import pygad
import networkx as nx
shouldPickUp = True
shouldDropOff = False
hasPicked = False
penalty = 0
initial_pickup_loc = None
uu = 0
def initial_enviroment():
    env = gym.make("Taxi-v3", render_mode = 'ansi').env
    env.reset(seed = 28)
    return env

def renderMap(env):
    ok = env.render()
    print(ok)


def get_state(env):
    global initial_pickup_loc
    state = env.s
    taxi_row, taxi_col, pass_idx, dest_idx = env.decode(state)

    if pass_idx != 4 and initial_pickup_loc is None:
        initial_pickup_loc = env.locs[pass_idx]

    if pass_idx == 4:
        pickup_loc = initial_pickup_loc
    else:
        pickup_loc = env.locs[pass_idx]

    dropoff_loc = env.locs[dest_idx]
    return taxi_row, taxi_col, pickup_loc, dropoff_loc



def P0(env):
    env.step(0)
    return 3

def P1(env):
    env.step(1)
    return 3

def P2(env):
    env.step(2)
    return 3

def P3(env):
    env.step(3)
    return 3

def P4(env):
    global uu
    global hasPicked
    global penalty
    temp = env.step(4)
    reward = temp[1]
    if reward == -10:
        penalty += reward
    else:
        hasPicked = True
        uu = 6
        return 3
    
    return 3
  
def J3(env):
    taxi_row, taxi_col, pickup_loc,_ = get_state(env)
    if pickup_loc[0] == taxi_row and pickup_loc[1] == taxi_col:  # Pickup location is same as taxi location
        return 10
    elif pickup_loc[1] > taxi_col:  # Move East
        return 4 
    elif pickup_loc[1] < taxi_col:  # Move West
        return 5
    elif pickup_loc[0] > taxi_row:  # Move South
        return 6
    elif pickup_loc[0] < taxi_row:  # Move North
        return 7
    

def J4(env):
    taxi_row, taxi_col, _, _ = get_state(env)
    specific_locations = [(0, 1), (1, 1), (3, 0), (4, 0), (3, 2), (4, 2)]

    if (taxi_row, taxi_col) in specific_locations:
        if taxi_row < 2:
            return 6 #move south
        else:
            return 7 #move North
    return 8

def J5(env):
    taxi_row, taxi_col, _, _ = get_state(env)
    specific_locations = [(0, 2), (1, 2), (3, 1), (4, 1), (3, 3), (4, 3)]
    if (taxi_row, taxi_col) in specific_locations:
        # Check if increasing taxi_col and the new location is still in the specific locations
        if taxi_row < 2:
            return 6  #move south
        else:
            return 7  #move North
    return 9


functions_library = {
    3: J3,
    4: J4,
    5: J5,
    6: P0,
    7: P1,
    8: P2,
    9: P3,
    10: P4,
}

def get_infor_from_env(env):
    information = []
    if shouldPickUp == True and shouldDropOff == False:
        information.append(3)
        information.append(10)
        
        taxi_row, taxi_col, pickup_loc, _ = get_state(env)
        if pickup_loc[0] == taxi_row and pickup_loc[1] == taxi_col:  # Pickup location is same as taxi location
            information.append(10)
        elif pickup_loc[1] > taxi_col:  # Move East
            information.append(4)
            specific_locations = [(0, 1), (1, 1), (3, 0), (4, 0), (3, 2), (4, 2)]
            if (taxi_row, taxi_col) in specific_locations:
                if taxi_row < 2:
                    information.append(6)
                elif taxi_row > 2:
                    information.append(7)
                else:
                    information.append(8)
        elif pickup_loc[1] < taxi_col:  # Move West
            information.append(5)
            specific_locations = [(0, 2), (1, 2), (3, 1), (4, 1), (3, 3), (4, 3)]
            if (taxi_row, taxi_col) in specific_locations:
                if taxi_row < 2:
                    information.append(6)
                elif taxi_row > 2:
                    information.append(7)
                else:
                    information.append(9)
        elif pickup_loc[0] > taxi_row:  # Move South
            information.append(6)
        elif pickup_loc[0] < taxi_row:  # Move North
            information.append(7)
    information.sort()
    
    return information

def generate_2d_array(num_arrays, seed=None):
    if seed is not None:
        random.seed(seed)
    adj_list = {
        3: [7, 6, 4, 5, 10],
        4: [8, 7, 6],
        5: [6, 7, 9],
        6: [3],
        7: [3],
        8: [3],
        9: [3],
        10: [3]
    }
    long_1d_arrays = []
    for _ in range(num_arrays):
        long_1d_array = []

        for node, connections in adj_list.items():
            long_1d_array.append(node)

            num_connections = len(connections)
            if num_connections < 3:
                num_connections += 2
            long_1d_array.append(num_connections)

            connected_nodes = random.sample(sorted(set(range(3, 11)) - {node}), num_connections)
            long_1d_array.extend(connected_nodes)

        long_1d_arrays.append(long_1d_array)

    return long_1d_arrays

def find_node_index(node_id,graph_array):
    index = 0
    while index < len(graph_array):
        if graph_array[index] == node_id:
            return index
        num_connections = graph_array[index + 1]
        index += num_connections + 2
    return -1  # Return -1 if the node_id is not found in the grap

def go_thru(graph_array):
    ok = []
    env = initial_enviroment()
    index = 0
    step = 1

    while step <= 15:
        node_id = graph_array[index]
        ok.append(node_id)
        a = functions_library[node_id](env)
        con = graph_array[index+2:index+2+graph_array[index+1]]
        if a in con:
            index = find_node_index(a, graph_array)
        else:
            b_connections = get_infor_from_env(env)# get infor from enviroment 
            found_connection = None
            for connection in con:
                if connection in b_connections:
                    found_connection = connection
                    index = find_node_index(found_connection, graph_array)
 
                    break
            else:
                break
        step += 1
    
    return ok,env

def Astar(taxi_row, taxi_col, location):
    rows, cols = 5, 5
    G = nx.Graph()

    for y in range(rows):
        for x in range(cols):
            G.add_node((y, x))

    cannot_move_right = [(3, 0), (4, 0), (3, 2), (4, 2), (0, 1), (1, 1)]
    cannot_move_left = [(0, 2), (1, 2), (3, 1), (4, 1), (3, 3), (4, 3)]

    for y in range(rows):
        for x in range(cols):
            if (y, x) not in cannot_move_right and x + 1 < cols:
                G.add_edge((y, x), (y, x + 1))
            if (y, x) not in cannot_move_left and x - 1 >= 0:
                G.add_edge((y, x), (y, x - 1))
            if y + 1 < rows:
                G.add_edge((y, x), (y + 1, x))
            if y - 1 >= 0:
                G.add_edge((y, x), (y - 1, x))

    start = (taxi_row, taxi_col)
    goal = location
    path = nx.astar_path(G, start, goal)
    distance = len(path) - 1
    return distance


def fitness_equation(hasPickedUp,initial_pick_distance,final_pick_distance):
    picked = 0
    if hasPickedUp:
        picked = 1

    closedistace = 0
    if final_pick_distance < initial_pick_distance:
        closedistace = 30*max((initial_pick_distance-final_pick_distance),0)
    fitness_score = 100*picked + closedistace
    return fitness_score

initial_population = generate_2d_array(20)

def fitness_func(ga_instance, solution, solution_idx):
    global hasPicked
    hasPicked = False
    env = initial_enviroment()
    state_values = get_state(env)
    taxi_row, taxi_col, pickup_loc, _ = state_values
    temp = pickup_loc
    initial_distance = Astar(taxi_row, taxi_col, temp)
    ok, newEnv = go_thru(solution)
    state_values = get_state(newEnv)
    taxi_row, taxi_col, _, _ = state_values
    final_distance = Astar(taxi_row, taxi_col, temp)
    fs = fitness_equation(hasPicked,initial_distance,final_distance)
    return fs

def random_pick_2d_arrays(arr_2d, n):
    if len(arr_2d) < 2:
        raise ValueError("The input 2D array must contain at least 2 arrays.")
    picked_arrays = []
    for _ in range(n):
        indices = random.sample(range(len(arr_2d)), 2)
        selected_arrays = [arr_2d[i] for i in indices]
        picked_arrays.append(selected_arrays)

    return picked_arrays


def mutation(a):
    i = 0
    new_a = []
    while i < len(a):
        nodeID = a[i]
        num_connections = a[i + 1]
        a_connections = a[i + 2:i + 2 + num_connections]
        modified_connections = [random.choice([current_connection, random.randint(3, 10)]) if random.random() <= 0.001 else current_connection for current_connection in a_connections]
        new_a.append(nodeID)
        new_a.append(num_connections)
        new_a.extend(modified_connections)

        i += 2 + num_connections

    return new_a

def mutation_func(offspring, ga_instance):
    result = []
    for indi in offspring:
        a = mutation(indi)
        result.append(np.array(a))

    re = np.array(result)
    return re

def crossover(a, b):
    i = 0
    new_a = []
    new_b = []
    swap_rate=0.6
    while i < len(a):
        num_connections = a[i + 1]
        a_connections = a[i + 2:i + 2 + num_connections]
        b_connections = b[i + 2:i + 2 + num_connections]

        for j in range(num_connections):
            dice_roll = random.random()  # Generate a random number between 0 and 1
            if dice_roll <= swap_rate:
                # Swap the digits
                a_connections[j], b_connections[j] = b_connections[j], a_connections[j]

        new_a.extend([a[i], num_connections])
        new_b.extend([b[i], num_connections])
        new_a.extend(a_connections)
        new_b.extend(b_connections)

        i += 2 + num_connections

    return new_a, new_b

def crossover_func(parents, offspring_size, ga_instance):
    pickTimes = int((offspring_size[0] + 1)/2)
    picker = random_pick_2d_arrays(parents,pickTimes)
    result = []
    for pair in picker:
         new_a, new_b = crossover(pair[0], pair[1])
         result.append(np.array(new_a))  # Ensure the offspring are NumPy arrays
         result.append(np.array(new_b))
    
    result.pop(int(offspring_size[0]))
    re = np.array(result)
    return re


ga_instance = pygad.GA(num_generations=2000,
                       gene_type=int,
                       initial_population=initial_population,
                       num_parents_mating=12,
                       fitness_func=fitness_func,
                       parent_selection_type="tournament",
                       K_tournament=6,
                       crossover_type= crossover_func,
                       mutation_type=mutation_func)

ga_instance.run()
fitness = ga_instance.cal_pop_fitness()

print(uu)
print(fitness[0])


